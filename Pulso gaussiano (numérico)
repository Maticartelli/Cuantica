import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation 
import scipy.fftpack


#Esto es para crear una animación:-------------------------------------------------------
def animar(f,x0=0,xf=1,dx=0.01,t0=0,tf=1,dt=0.01, ym=-2, yM= 2):
    nf = int( (xf-x0)/dx + 1)
    nt = int( (tf-t0)/dt + 1)
    x = np.linspace(x0,xf,nf)
    t = np.linspace(t0,tf,nt)
    fig, ax = plt.subplots()

    ax.set_xlim((x0, xf))
    ax.set_ylim((ym, yM))

    line, = ax.plot([], [], lw=2)
    def init():
        line.set_data([], [])
        return (line,)
    def animate(i):
        y = f(x,i)
        line.set_data(x, y)
        return (line,)
    anim = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=t, interval=20, blit=True)
    plt.show()
    return anim
 #--------------------------------------------------------------------------------------   
    
    # parámetros de la gaussiana
x0=0 # posición inicial
a=1   # ancho
k0=5 # velocidad

xmax = 5 #x máximo
n = 1000 # número de puntos

x = np.linspace(-xmax, xmax, 2* n, endpoint=False)



#pulso gaussiano:
g = ((a * np.sqrt(np.pi)) ** (-0.5)
            * np.exp(-0.5 * ((x - x0) * 1. / a) ** 2 + 1j * x * k0))

#Ahora busco la transformada de Fourier del pulso inicial la cual me dará los coeficientes que multiplican a la función con sus respectivos k´s:
Ft = scipy.fftpack.fft(g)
#k = np.linspace(0, np.pi/(2*dx), int(n/4)) #defino los k´s
# Lo normalizo:
Ftnorm = 2.0*(np.pi**2)/(2*n) * abs(Ft)
freq = scipy.fftpack.fftfreq(len(g)) * n
plt.xlabel("K")
plt.ylabel("Ft normalizada")
plt.grid(True,linestyle=":")


def PSI(x,t): #Ahora multiplico por el término exponencial que lleva consigo a x para obtener la Función Psi(x,t) como 
    #proyección en el espacio de H
    b = 0
    for i in range(len(x)):
        b += Ftnorm[i] * np.exp(1j* (freq[i] ** 2) * 0.5 * t) * np.exp(-1j*freq[i]*x)
    return abs(b)**2/200
#código para los gráficos
fig = plt.figure()
plt.xlabel("x")
plt.ylabel("$|\Psi(x,t)|^2$")
plt.grid(True,linestyle=":")
plt.plot(x,PSI(x,0),label= "$|\Psi(x,0)|^2$")
plt.xlim(-3,5)
plt.plot(x,PSI(x,1),label= "$|\Psi(x,1)|^2$")
plt.plot(x,PSI(x,0.5),label= "$|\Psi(x,0.5)|^2$")
plt.legend()


#Animación:
#anim = animar(PSI,x0=-1,xf=5,t0=0,tf=2,ym=-1,yM=1.3)#-------------> pulso numérico en el tiempo, no logro ver por que va mucho
# mas lento, me imagino que es porque para este tiene que hacer mucho mas cálculos.


#para comparar, acá está definido analíticamente un pulso gaussiano
#def phi(x,t):
#    B = (2*a/np.pi)**(0.25) 
#    h = np.sqrt(1/(a + 1j*2*t*a))
#    j = ((1j*x+k0/(2*a))**2 ) / (1+a* 1j*2*t)
#    psi= B * np.exp(-k0**2 /(4*a)) * np.exp(a*j) * h
#    return abs(psi)
#plt.plot(x,phi(x,0),linestyle = "--",color = "b",label = "Pulso analítico")
#plt.plot(x,PSI(x,0),color = "r", label="Pulso numérico")
#plt.grid(True,linestyle=":")
#plt.legend() ########## comparación analítico/numérico a tiempo 0.
